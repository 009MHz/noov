{"uid":"c9de8fa22def7df8","name":"Language toggle switches to Indonesian path","fullName":"tests.web.smoke.test_smoke_home#test_language_toggle","historyId":"8361bf654404c23e6739549b636e4f62","time":{"start":1756764525994,"stop":1756764531377,"duration":5383},"status":"broken","statusMessage":"playwright._impl._errors.Error: value must be a string or regular expression","statusTrace":"page = <Page url='https://noovoleum.com/id/'>\n\n    @pytest.mark.ui\n    @allure.title(\"Language toggle switches to Indonesian path\")\n    def test_language_toggle(page: Page):\n>       HomePage(page).open().toggle_language().assert_switched_to_indonesian()\n\ntests/web/smoke/test_smoke_home.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsources/web/home_page.py:47: in assert_switched_to_indonesian\n    expect(self.page).to_have_url(lambda url: url.endswith(\"/id\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitems = [<function HomePage.assert_switched_to_indonesian.<locals>.<lambda> at 0x7f39153b9300>]\nmatch_substring = False, normalize_white_space = False, ignoreCase = None\n\n    def to_expected_text_values(\n        items: Union[\n            Sequence[Pattern[str]], Sequence[str], Sequence[Union[str, Pattern[str]]]\n        ],\n        match_substring: bool = False,\n        normalize_white_space: bool = False,\n        ignoreCase: Optional[bool] = None,\n    ) -> Sequence[ExpectedTextValue]:\n        out: List[ExpectedTextValue] = []\n        assert isinstance(items, (list, tuple))\n        for item in items:\n            if isinstance(item, str):\n                o = ExpectedTextValue(\n                    string=item,\n                    matchSubstring=match_substring,\n                    normalizeWhiteSpace=normalize_white_space,\n                    ignoreCase=ignoreCase,\n                )\n                if o[\"ignoreCase\"] is None:\n                    del o[\"ignoreCase\"]\n                out.append(o)\n            elif isinstance(item, Pattern):\n                out.append(\n                    expected_regex(item, match_substring, normalize_white_space, ignoreCase)\n                )\n            else:\n>               raise Error(\"value must be a string or regular expression\")\nE               playwright._impl._errors.Error: value must be a string or regular expression\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/playwright/_impl/_assertions.py:1028: Error","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"context","time":{"start":1756764525939,"stop":1756764525948,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1756764525949,"stop":1756764525993,"duration":44},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"playwright._impl._errors.Error: value must be a string or regular expression","statusTrace":"page = <Page url='https://noovoleum.com/id/'>\n\n    @pytest.mark.ui\n    @allure.title(\"Language toggle switches to Indonesian path\")\n    def test_language_toggle(page: Page):\n>       HomePage(page).open().toggle_language().assert_switched_to_indonesian()\n\ntests/web/smoke/test_smoke_home.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsources/web/home_page.py:47: in assert_switched_to_indonesian\n    expect(self.page).to_have_url(lambda url: url.endswith(\"/id\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitems = [<function HomePage.assert_switched_to_indonesian.<locals>.<lambda> at 0x7f39153b9300>]\nmatch_substring = False, normalize_white_space = False, ignoreCase = None\n\n    def to_expected_text_values(\n        items: Union[\n            Sequence[Pattern[str]], Sequence[str], Sequence[Union[str, Pattern[str]]]\n        ],\n        match_substring: bool = False,\n        normalize_white_space: bool = False,\n        ignoreCase: Optional[bool] = None,\n    ) -> Sequence[ExpectedTextValue]:\n        out: List[ExpectedTextValue] = []\n        assert isinstance(items, (list, tuple))\n        for item in items:\n            if isinstance(item, str):\n                o = ExpectedTextValue(\n                    string=item,\n                    matchSubstring=match_substring,\n                    normalizeWhiteSpace=normalize_white_space,\n                    ignoreCase=ignoreCase,\n                )\n                if o[\"ignoreCase\"] is None:\n                    del o[\"ignoreCase\"]\n                out.append(o)\n            elif isinstance(item, Pattern):\n                out.append(\n                    expected_regex(item, match_substring, normalize_white_space, ignoreCase)\n                )\n            else:\n>               raise Error(\"value must be a string or regular expression\")\nE               playwright._impl._errors.Error: value must be a string or regular expression\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/playwright/_impl/_assertions.py:1028: Error","steps":[],"attachments":[{"uid":"f1880fc2b7f30f3e","name":"screenshot-test_language_toggle[chromium]-chromium","source":"f1880fc2b7f30f3e.png","type":"image/png","size":11733}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":1,"hasContent":true},"afterStages":[{"name":"page::0","time":{"start":1756764532208,"stop":1756764532215,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context::0","time":{"start":1756764532215,"stop":1756764532504,"duration":289},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"ui"},{"name":"parentSuite","value":"tests.web.smoke"},{"name":"suite","value":"test_smoke_home"},{"name":"host","value":"pkrvmccyg1gnepe"},{"name":"thread","value":"5753-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.web.smoke.test_smoke_home"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser_name","value":"'chromium'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"25f5dc6f6af08c26","status":"broken","statusDetails":"playwright._impl._errors.Error: value must be a string or regular expression","time":{"start":1756764517376,"stop":1756764522788,"duration":5412}},{"uid":"4d19138613f24bf3","status":"broken","statusDetails":"playwright._impl._errors.Error: value must be a string or regular expression","time":{"start":1756764509066,"stop":1756764514471,"duration":5405}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["ui"]},"source":"c9de8fa22def7df8.json","parameterValues":["'chromium'"]}