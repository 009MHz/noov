name: UI Tests

on:
  workflow_call:
    inputs:
      base_url:
        required: true
        type: string
      browsers:
        required: false
        type: string
        default: "chromium" # e.g., "chromium,firefox,webkit"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      browsers_json: ${{ steps.mk.outputs.browsers_json }}
    steps:
      - id: mk
        run: |
          RAW="${{ inputs.browsers }}"
          RAW_NO_SPACE="$(echo "$RAW" | tr -d '[:space:]')"
          JSON_ARRAY="$(printf '%s' "$RAW_NO_SPACE" | awk -F, 'BEGIN{printf "["}{for(i=1;i<=NF;i++){gsub(/"/,"",$i); printf "%s\"%s\"", (i>1?",":""), $i} printf "]"}')"
          echo "browsers_json=$JSON_ARRAY" >> "$GITHUB_OUTPUT"

  ui:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        browser: ${{ fromJson(needs.prepare.outputs.browsers_json) }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ui-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-ui-

      - name: Install deps
        run: |
          pip install -U pip
          pip install -r requirements.txt
          python -m playwright install --with-deps ${{ matrix.browser }}

      - name: Create .env file from secret
        run: |
          # Create .env file from GitHub secret
          echo "${{ secrets.AUTH_CREDENTIALS }}" > .env
          
          # Verify the .env file was created (without showing contents)
          if [ -f ".env" ]; then
            echo ".env file created successfully"
            # Count the number of non-empty lines as a basic validation
            NON_EMPTY_LINES=$(grep -v '^$' .env | wc -l)
            echo "Number of configuration lines: $NON_EMPTY_LINES"
          else
            echo "Failed to create .env file"
            exit 1
          fi

      - name: Setup auth session
        run: |
          # The setup_session script will read from the .env file
          cd $GITHUB_WORKSPACE
          python -m utils.setup_session

      - name: Run UI tests (${{ matrix.browser }})
        run: |
          pytest tests/web \
            --browser ${{ matrix.browser }} \
            --base-url=${{ inputs.base_url }} \
            -n=auto --reruns 1 --reruns-delay 2 \
            --alluredir=allure-results --headless --platform=all

      - name: Upload Allure (UI-${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-ui-${{ matrix.browser }}
          path: allure-results
          if-no-files-found: warn

      - name: Cleanup authentication session
        if: always()
        run: |
          # Check if .auth directory exists before removing
          if [ -d ".auth" ]; then
            rm -rf .auth
            echo "Authentication session files removed"
          else
            echo "No authentication session files found to clean up"
          fi
